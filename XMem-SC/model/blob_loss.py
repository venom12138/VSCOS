import numpy as np
import skimage.measure as measure
from PIL import Image
import matplotlib.pyplot as plt
import torch.nn.functional as F
import torch 

def convert_to_one_hot(y, C):
    return np.eye(C)[y.reshape(-1)].T

davis_palette = b'\x00\x00\x00\x80\x00\x00\x80\x80\x00\x00\x80\x00\x00\x00\x80\x80\x00\x80\x00\x80\x80\x80\x80\x80@\x00\x00\xc0\x00\x00@\x80\x00\xc0\x80\x00@\x00\x80\xc0\x00\x80@\x80\x80\xc0\x80\x80\x00@\x00\x80@\x00\x00\xc0\x00\x80\xc0\x00\x00@\x80\x80@\x80\x00\xc0\x80\x80\xc0\x80@@\x00\xc0@\x00@\xc0\x00\xc0\xc0\x00@@\x80\xc0@\x80@\xc0\x80\xc0\xc0\x80\x00\x00@\x80\x00@\x00\x80@\x80\x80@\x00\x00\xc0\x80\x00\xc0\x00\x80\xc0\x80\x80\xc0@\x00@\xc0\x00@@\x80@\xc0\x80@@\x00\xc0\xc0\x00\xc0@\x80\xc0\xc0\x80\xc0\x00@@\x80@@\x00\xc0@\x80\xc0@\x00@\xc0\x80@\xc0\x00\xc0\xc0\x80\xc0\xc0@@@\xc0@@@\xc0@\xc0\xc0@@@\xc0\xc0@\xc0@\xc0\xc0\xc0\xc0\xc0 \x00\x00\xa0\x00\x00 \x80\x00\xa0\x80\x00 \x00\x80\xa0\x00\x80 \x80\x80\xa0\x80\x80`\x00\x00\xe0\x00\x00`\x80\x00\xe0\x80\x00`\x00\x80\xe0\x00\x80`\x80\x80\xe0\x80\x80 @\x00\xa0@\x00 \xc0\x00\xa0\xc0\x00 @\x80\xa0@\x80 \xc0\x80\xa0\xc0\x80`@\x00\xe0@\x00`\xc0\x00\xe0\xc0\x00`@\x80\xe0@\x80`\xc0\x80\xe0\xc0\x80 \x00@\xa0\x00@ \x80@\xa0\x80@ \x00\xc0\xa0\x00\xc0 \x80\xc0\xa0\x80\xc0`\x00@\xe0\x00@`\x80@\xe0\x80@`\x00\xc0\xe0\x00\xc0`\x80\xc0\xe0\x80\xc0 @@\xa0@@ \xc0@\xa0\xc0@ @\xc0\xa0@\xc0 \xc0\xc0\xa0\xc0\xc0`@@\xe0@@`\xc0@\xe0\xc0@`@\xc0\xe0@\xc0`\xc0\xc0\xe0\xc0\xc0\x00 \x00\x80 \x00\x00\xa0\x00\x80\xa0\x00\x00 \x80\x80 \x80\x00\xa0\x80\x80\xa0\x80@ \x00\xc0 \x00@\xa0\x00\xc0\xa0\x00@ \x80\xc0 \x80@\xa0\x80\xc0\xa0\x80\x00`\x00\x80`\x00\x00\xe0\x00\x80\xe0\x00\x00`\x80\x80`\x80\x00\xe0\x80\x80\xe0\x80@`\x00\xc0`\x00@\xe0\x00\xc0\xe0\x00@`\x80\xc0`\x80@\xe0\x80\xc0\xe0\x80\x00 @\x80 @\x00\xa0@\x80\xa0@\x00 \xc0\x80 \xc0\x00\xa0\xc0\x80\xa0\xc0@ @\xc0 @@\xa0@\xc0\xa0@@ \xc0\xc0 \xc0@\xa0\xc0\xc0\xa0\xc0\x00`@\x80`@\x00\xe0@\x80\xe0@\x00`\xc0\x80`\xc0\x00\xe0\xc0\x80\xe0\xc0@`@\xc0`@@\xe0@\xc0\xe0@@`\xc0\xc0`\xc0@\xe0\xc0\xc0\xe0\xc0  \x00\xa0 \x00 \xa0\x00\xa0\xa0\x00  \x80\xa0 \x80 \xa0\x80\xa0\xa0\x80` \x00\xe0 \x00`\xa0\x00\xe0\xa0\x00` \x80\xe0 \x80`\xa0\x80\xe0\xa0\x80 `\x00\xa0`\x00 \xe0\x00\xa0\xe0\x00 `\x80\xa0`\x80 \xe0\x80\xa0\xe0\x80``\x00\xe0`\x00`\xe0\x00\xe0\xe0\x00``\x80\xe0`\x80`\xe0\x80\xe0\xe0\x80  @\xa0 @ \xa0@\xa0\xa0@  \xc0\xa0 \xc0 \xa0\xc0\xa0\xa0\xc0` @\xe0 @`\xa0@\xe0\xa0@` \xc0\xe0 \xc0`\xa0\xc0\xe0\xa0\xc0 `@\xa0`@ \xe0@\xa0\xe0@ `\xc0\xa0`\xc0 \xe0\xc0\xa0\xe0\xc0``@\xe0`@`\xe0@\xe0\xe0@``\xc0\xe0`\xc0`\xe0\xc0\xe0\xe0\xc0'

img_path = '/home/venom/projects/XMem/val_data/P01/anno_masks/P01_14/P01_14_93/frame_0000016409.png'
img = np.array(Image.open(img_path).convert('1')).astype(np.bool)

blob_anno = measure.label(img, connectivity = 2)
blob_img = measure.label(img, connectivity = 2)
print(np.unique(blob_img))

one_hot_anno = F.one_hot(torch.tensor(blob_anno).to(torch.int64), num_classes=np.max(blob_anno)+1).permute(2, 0, 1)
one_hot_anno_wo_bg = np.array(one_hot_anno[1:])

one_hot_img = F.one_hot(torch.tensor(blob_img).to(torch.int64), num_classes=np.max(blob_img)+1).permute(2, 0, 1)
one_hot_img_wo_bg = np.array(one_hot_img[1:])


instance_iou = []
if one_hot_anno_wo_bg.shape[0] == 0:
    pass
    
for i in range(one_hot_anno_wo_bg.shape[0]):
    gt_instance = one_hot_anno_wo_bg[i]
    max_iou = 0
    max_iou_idx = -1
    if one_hot_img_wo_bg.shape[0] == 0:
        break
    for j in range(one_hot_img_wo_bg.shape[0]):
        pred_instance = one_hot_img_wo_bg[j]
        inter = np.sum((pred_instance & gt_instance), axis=(-2, -1))
        union = np.sum((pred_instance | gt_instance), axis=(-2, -1))
        iou = (inter / union)
        if iou > max_iou:
            max_iou = iou
            max_iou_idx = j
    instance_iou.append(max_iou)
    one_hot_img_wo_bg = np.concatenate([one_hot_img_wo_bg[:j],one_hot_img_wo_bg[(j+1):]])

if len(instance_iou) != 0:
    blob_iou = np.mean(instance_iou)
else:
    blob_iou = 0
    








new_mask = Image.fromarray(blob_img.astype(np.uint8)).convert('P')
palette = np.frombuffer(davis_palette, dtype=np.uint8).reshape(-1, 3).copy()

new_mask.putpalette(palette)
plt.imshow(new_mask)
plt.show()